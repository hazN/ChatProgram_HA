// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authentication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto

#include <limits>
#include <string>

#include <../include/google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <../include/google/protobuf/port_undef.inc>
#include <../include/google/protobuf/io/coded_stream.h>
#include <../include/google/protobuf/arena.h>
#include <../include/google/protobuf/arenastring.h>
#include <../include/google/protobuf/generated_message_util.h>
#include <../include/google/protobuf/metadata_lite.h>
#include <../include/google/protobuf/generated_message_reflection.h>
#include <../include/google/protobuf/message.h>
#include <../include/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <../include/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <../include/google/protobuf/generated_enum_reflection.h>
#include <../include/google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <../include/google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_authentication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authentication_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authentication_2eproto;
namespace authentication {
class AuthenticateWeb;
struct AuthenticateWebDefaultTypeInternal;
extern AuthenticateWebDefaultTypeInternal _AuthenticateWeb_default_instance_;
class AuthenticateWebFailure;
struct AuthenticateWebFailureDefaultTypeInternal;
extern AuthenticateWebFailureDefaultTypeInternal _AuthenticateWebFailure_default_instance_;
class AuthenticateWebSuccess;
struct AuthenticateWebSuccessDefaultTypeInternal;
extern AuthenticateWebSuccessDefaultTypeInternal _AuthenticateWebSuccess_default_instance_;
class CreateAccountWeb;
struct CreateAccountWebDefaultTypeInternal;
extern CreateAccountWebDefaultTypeInternal _CreateAccountWeb_default_instance_;
class CreateAccountWebFailure;
struct CreateAccountWebFailureDefaultTypeInternal;
extern CreateAccountWebFailureDefaultTypeInternal _CreateAccountWebFailure_default_instance_;
class CreateAccountWebSuccess;
struct CreateAccountWebSuccessDefaultTypeInternal;
extern CreateAccountWebSuccessDefaultTypeInternal _CreateAccountWebSuccess_default_instance_;
}  // namespace authentication
PROTOBUF_NAMESPACE_OPEN
template<> ::authentication::AuthenticateWeb* Arena::CreateMaybeMessage<::authentication::AuthenticateWeb>(Arena*);
template<> ::authentication::AuthenticateWebFailure* Arena::CreateMaybeMessage<::authentication::AuthenticateWebFailure>(Arena*);
template<> ::authentication::AuthenticateWebSuccess* Arena::CreateMaybeMessage<::authentication::AuthenticateWebSuccess>(Arena*);
template<> ::authentication::CreateAccountWeb* Arena::CreateMaybeMessage<::authentication::CreateAccountWeb>(Arena*);
template<> ::authentication::CreateAccountWebFailure* Arena::CreateMaybeMessage<::authentication::CreateAccountWebFailure>(Arena*);
template<> ::authentication::CreateAccountWebSuccess* Arena::CreateMaybeMessage<::authentication::CreateAccountWebSuccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace authentication {

enum CreateAccountWebFailure_reason : int {
  CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS = 0,
  CreateAccountWebFailure_reason_INVALID_PASSWORD = 1,
  CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR = 2
};
bool CreateAccountWebFailure_reason_IsValid(int value);
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure_reason_reason_MIN = CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS;
constexpr CreateAccountWebFailure_reason CreateAccountWebFailure_reason_reason_MAX = CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR;
constexpr int CreateAccountWebFailure_reason_reason_ARRAYSIZE = CreateAccountWebFailure_reason_reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateAccountWebFailure_reason_descriptor();
template<typename T>
inline const std::string& CreateAccountWebFailure_reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateAccountWebFailure_reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateAccountWebFailure_reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateAccountWebFailure_reason_descriptor(), enum_t_value);
}
inline bool CreateAccountWebFailure_reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateAccountWebFailure_reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateAccountWebFailure_reason>(
    CreateAccountWebFailure_reason_descriptor(), name, value);
}
enum AuthenticateWebFailure_reason : int {
  AuthenticateWebFailure_reason_INVALID_CREDENTIALS = 0,
  AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR = 1
};
bool AuthenticateWebFailure_reason_IsValid(int value);
constexpr AuthenticateWebFailure_reason AuthenticateWebFailure_reason_reason_MIN = AuthenticateWebFailure_reason_INVALID_CREDENTIALS;
constexpr AuthenticateWebFailure_reason AuthenticateWebFailure_reason_reason_MAX = AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR;
constexpr int AuthenticateWebFailure_reason_reason_ARRAYSIZE = AuthenticateWebFailure_reason_reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticateWebFailure_reason_descriptor();
template<typename T>
inline const std::string& AuthenticateWebFailure_reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticateWebFailure_reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticateWebFailure_reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticateWebFailure_reason_descriptor(), enum_t_value);
}
inline bool AuthenticateWebFailure_reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthenticateWebFailure_reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticateWebFailure_reason>(
    AuthenticateWebFailure_reason_descriptor(), name, value);
}
// ===================================================================

class CreateAccountWeb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.CreateAccountWeb) */ {
 public:
  inline CreateAccountWeb() : CreateAccountWeb(nullptr) {}
  ~CreateAccountWeb() override;
  explicit PROTOBUF_CONSTEXPR CreateAccountWeb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWeb(const CreateAccountWeb& from);
  CreateAccountWeb(CreateAccountWeb&& from) noexcept
    : CreateAccountWeb() {
    *this = ::std::move(from);
  }

  inline CreateAccountWeb& operator=(const CreateAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWeb& operator=(CreateAccountWeb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWeb& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWeb* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWeb*>(
               &_CreateAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAccountWeb& a, CreateAccountWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWeb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWeb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAccountWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAccountWeb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWeb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateAccountWeb& from) {
    CreateAccountWeb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWeb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.CreateAccountWeb";
  }
  protected:
  explicit CreateAccountWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintextpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintextpassword();
  PROTOBUF_NODISCARD std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  int64_t requestid() const;
  void set_requestid(int64_t value);
  private:
  int64_t _internal_requestid() const;
  void _internal_set_requestid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.CreateAccountWeb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
    int64_t requestid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.CreateAccountWebSuccess) */ {
 public:
  inline CreateAccountWebSuccess() : CreateAccountWebSuccess(nullptr) {}
  ~CreateAccountWebSuccess() override;
  explicit PROTOBUF_CONSTEXPR CreateAccountWebSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWebSuccess(const CreateAccountWebSuccess& from);
  CreateAccountWebSuccess(CreateAccountWebSuccess&& from) noexcept
    : CreateAccountWebSuccess() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebSuccess& operator=(const CreateAccountWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebSuccess& operator=(CreateAccountWebSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWebSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWebSuccess* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebSuccess*>(
               &_CreateAccountWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateAccountWebSuccess& a, CreateAccountWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAccountWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAccountWebSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWebSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateAccountWebSuccess& from) {
    CreateAccountWebSuccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.CreateAccountWebSuccess";
  }
  protected:
  explicit CreateAccountWebSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  int64_t requestid() const;
  void set_requestid(int64_t value);
  private:
  int64_t _internal_requestid() const;
  void _internal_set_requestid(int64_t value);
  public:

  // required int64 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  int64_t userid() const;
  void set_userid(int64_t value);
  private:
  int64_t _internal_userid() const;
  void _internal_set_userid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.CreateAccountWebSuccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t requestid_;
    int64_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountWebFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.CreateAccountWebFailure) */ {
 public:
  inline CreateAccountWebFailure() : CreateAccountWebFailure(nullptr) {}
  ~CreateAccountWebFailure() override;
  explicit PROTOBUF_CONSTEXPR CreateAccountWebFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountWebFailure(const CreateAccountWebFailure& from);
  CreateAccountWebFailure(CreateAccountWebFailure&& from) noexcept
    : CreateAccountWebFailure() {
    *this = ::std::move(from);
  }

  inline CreateAccountWebFailure& operator=(const CreateAccountWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountWebFailure& operator=(CreateAccountWebFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountWebFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountWebFailure* internal_default_instance() {
    return reinterpret_cast<const CreateAccountWebFailure*>(
               &_CreateAccountWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateAccountWebFailure& a, CreateAccountWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountWebFailure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountWebFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateAccountWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateAccountWebFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountWebFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateAccountWebFailure& from) {
    CreateAccountWebFailure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountWebFailure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.CreateAccountWebFailure";
  }
  protected:
  explicit CreateAccountWebFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateAccountWebFailure_reason reason;
  static constexpr reason ACCOUNT_ALREADY_EXISTS =
    CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS;
  static constexpr reason INVALID_PASSWORD =
    CreateAccountWebFailure_reason_INVALID_PASSWORD;
  static constexpr reason INTERNAL_SERVER_ERROR =
    CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR;
  static inline bool reason_IsValid(int value) {
    return CreateAccountWebFailure_reason_IsValid(value);
  }
  static constexpr reason reason_MIN =
    CreateAccountWebFailure_reason_reason_MIN;
  static constexpr reason reason_MAX =
    CreateAccountWebFailure_reason_reason_MAX;
  static constexpr int reason_ARRAYSIZE =
    CreateAccountWebFailure_reason_reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reason_descriptor() {
    return CreateAccountWebFailure_reason_descriptor();
  }
  template<typename T>
  static inline const std::string& reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reason_Name.");
    return CreateAccountWebFailure_reason_Name(enum_t_value);
  }
  static inline bool reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      reason* value) {
    return CreateAccountWebFailure_reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  int64_t requestid() const;
  void set_requestid(int64_t value);
  private:
  int64_t _internal_requestid() const;
  void _internal_set_requestid(int64_t value);
  public:

  // required .authentication.CreateAccountWebFailure.reason error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::authentication::CreateAccountWebFailure_reason error() const;
  void set_error(::authentication::CreateAccountWebFailure_reason value);
  private:
  ::authentication::CreateAccountWebFailure_reason _internal_error() const;
  void _internal_set_error(::authentication::CreateAccountWebFailure_reason value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.CreateAccountWebFailure)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t requestid_;
    int error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWeb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.AuthenticateWeb) */ {
 public:
  inline AuthenticateWeb() : AuthenticateWeb(nullptr) {}
  ~AuthenticateWeb() override;
  explicit PROTOBUF_CONSTEXPR AuthenticateWeb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWeb(const AuthenticateWeb& from);
  AuthenticateWeb(AuthenticateWeb&& from) noexcept
    : AuthenticateWeb() {
    *this = ::std::move(from);
  }

  inline AuthenticateWeb& operator=(const AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWeb& operator=(AuthenticateWeb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWeb& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWeb*>(
               &_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticateWeb& a, AuthenticateWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWeb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWeb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticateWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticateWeb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWeb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthenticateWeb& from) {
    AuthenticateWeb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWeb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.AuthenticateWeb";
  }
  protected:
  explicit AuthenticateWeb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintextpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintextpassword();
  PROTOBUF_NODISCARD std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  int64_t requestid() const;
  void set_requestid(int64_t value);
  private:
  int64_t _internal_requestid() const;
  void _internal_set_requestid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.AuthenticateWeb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
    int64_t requestid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.AuthenticateWebSuccess) */ {
 public:
  inline AuthenticateWebSuccess() : AuthenticateWebSuccess(nullptr) {}
  ~AuthenticateWebSuccess() override;
  explicit PROTOBUF_CONSTEXPR AuthenticateWebSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWebSuccess(const AuthenticateWebSuccess& from);
  AuthenticateWebSuccess(AuthenticateWebSuccess&& from) noexcept
    : AuthenticateWebSuccess() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebSuccess& operator=(const AuthenticateWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebSuccess& operator=(AuthenticateWebSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWebSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWebSuccess* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebSuccess*>(
               &_AuthenticateWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthenticateWebSuccess& a, AuthenticateWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticateWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticateWebSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWebSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthenticateWebSuccess& from) {
    AuthenticateWebSuccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.AuthenticateWebSuccess";
  }
  protected:
  explicit AuthenticateWebSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required string creationDate = 3;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationdate();
  PROTOBUF_NODISCARD std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  int64_t requestid() const;
  void set_requestid(int64_t value);
  private:
  int64_t _internal_requestid() const;
  void _internal_set_requestid(int64_t value);
  public:

  // required int64 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  int64_t userid() const;
  void set_userid(int64_t value);
  private:
  int64_t _internal_userid() const;
  void _internal_set_userid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.AuthenticateWebSuccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
    int64_t requestid_;
    int64_t userid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWebFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:authentication.AuthenticateWebFailure) */ {
 public:
  inline AuthenticateWebFailure() : AuthenticateWebFailure(nullptr) {}
  ~AuthenticateWebFailure() override;
  explicit PROTOBUF_CONSTEXPR AuthenticateWebFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateWebFailure(const AuthenticateWebFailure& from);
  AuthenticateWebFailure(AuthenticateWebFailure&& from) noexcept
    : AuthenticateWebFailure() {
    *this = ::std::move(from);
  }

  inline AuthenticateWebFailure& operator=(const AuthenticateWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWebFailure& operator=(AuthenticateWebFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateWebFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateWebFailure* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWebFailure*>(
               &_AuthenticateWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthenticateWebFailure& a, AuthenticateWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWebFailure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateWebFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticateWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticateWebFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateWebFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthenticateWebFailure& from) {
    AuthenticateWebFailure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWebFailure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "authentication.AuthenticateWebFailure";
  }
  protected:
  explicit AuthenticateWebFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthenticateWebFailure_reason reason;
  static constexpr reason INVALID_CREDENTIALS =
    AuthenticateWebFailure_reason_INVALID_CREDENTIALS;
  static constexpr reason INTERNAL_SERVER_ERROR =
    AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR;
  static inline bool reason_IsValid(int value) {
    return AuthenticateWebFailure_reason_IsValid(value);
  }
  static constexpr reason reason_MIN =
    AuthenticateWebFailure_reason_reason_MIN;
  static constexpr reason reason_MAX =
    AuthenticateWebFailure_reason_reason_MAX;
  static constexpr int reason_ARRAYSIZE =
    AuthenticateWebFailure_reason_reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reason_descriptor() {
    return AuthenticateWebFailure_reason_descriptor();
  }
  template<typename T>
  static inline const std::string& reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reason_Name.");
    return AuthenticateWebFailure_reason_Name(enum_t_value);
  }
  static inline bool reason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      reason* value) {
    return AuthenticateWebFailure_reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // required int64 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  int64_t requestid() const;
  void set_requestid(int64_t value);
  private:
  int64_t _internal_requestid() const;
  void _internal_set_requestid(int64_t value);
  public:

  // required .authentication.AuthenticateWebFailure.reason error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::authentication::AuthenticateWebFailure_reason error() const;
  void set_error(::authentication::AuthenticateWebFailure_reason value);
  private:
  ::authentication::AuthenticateWebFailure_reason _internal_error() const;
  void _internal_set_error(::authentication::AuthenticateWebFailure_reason value);
  public:

  // @@protoc_insertion_point(class_scope:authentication.AuthenticateWebFailure)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t requestid_;
    int error_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_authentication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAccountWeb

// required int64 requestId = 1;
inline bool CreateAccountWeb::_internal_has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void CreateAccountWeb::clear_requestid() {
  _impl_.requestid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t CreateAccountWeb::_internal_requestid() const {
  return _impl_.requestid_;
}
inline int64_t CreateAccountWeb::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWeb.requestId)
  return _internal_requestid();
}
inline void CreateAccountWeb::_internal_set_requestid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.requestid_ = value;
}
inline void CreateAccountWeb::set_requestid(int64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWeb.requestId)
}

// required string email = 2;
inline bool CreateAccountWeb::_internal_has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_email() const {
  return _internal_has_email();
}
inline void CreateAccountWeb::clear_email() {
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateAccountWeb::email() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWeb.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountWeb::set_email(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWeb.email)
}
inline std::string* CreateAccountWeb::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:authentication.CreateAccountWeb.email)
  return _s;
}
inline const std::string& CreateAccountWeb::_internal_email() const {
  return _impl_.email_.Get();
}
inline void CreateAccountWeb::_internal_set_email(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::_internal_mutable_email() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::release_email() {
  // @@protoc_insertion_point(field_release:authentication.CreateAccountWeb.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CreateAccountWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:authentication.CreateAccountWeb.email)
}

// required string plaintextPassword = 3;
inline bool CreateAccountWeb::_internal_has_plaintextpassword() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWeb::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void CreateAccountWeb::clear_plaintextpassword() {
  _impl_.plaintextpassword_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateAccountWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWeb.plaintextPassword)
  return _internal_plaintextpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountWeb::set_plaintextpassword(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.plaintextpassword_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWeb.plaintextPassword)
}
inline std::string* CreateAccountWeb::mutable_plaintextpassword() {
  std::string* _s = _internal_mutable_plaintextpassword();
  // @@protoc_insertion_point(field_mutable:authentication.CreateAccountWeb.plaintextPassword)
  return _s;
}
inline const std::string& CreateAccountWeb::_internal_plaintextpassword() const {
  return _impl_.plaintextpassword_.Get();
}
inline void CreateAccountWeb::_internal_set_plaintextpassword(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.plaintextpassword_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::_internal_mutable_plaintextpassword() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.plaintextpassword_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateAccountWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:authentication.CreateAccountWeb.plaintextPassword)
  if (!_internal_has_plaintextpassword()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.plaintextpassword_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.plaintextpassword_.IsDefault()) {
    _impl_.plaintextpassword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CreateAccountWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.plaintextpassword_.SetAllocated(plaintextpassword, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.plaintextpassword_.IsDefault()) {
    _impl_.plaintextpassword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:authentication.CreateAccountWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// CreateAccountWebSuccess

// required int64 requestId = 1;
inline bool CreateAccountWebSuccess::_internal_has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWebSuccess::has_requestid() const {
  return _internal_has_requestid();
}
inline void CreateAccountWebSuccess::clear_requestid() {
  _impl_.requestid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t CreateAccountWebSuccess::_internal_requestid() const {
  return _impl_.requestid_;
}
inline int64_t CreateAccountWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebSuccess.requestId)
  return _internal_requestid();
}
inline void CreateAccountWebSuccess::_internal_set_requestid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.requestid_ = value;
}
inline void CreateAccountWebSuccess::set_requestid(int64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebSuccess.requestId)
}

// required int64 userId = 2;
inline bool CreateAccountWebSuccess::_internal_has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWebSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void CreateAccountWebSuccess::clear_userid() {
  _impl_.userid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t CreateAccountWebSuccess::_internal_userid() const {
  return _impl_.userid_;
}
inline int64_t CreateAccountWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebSuccess.userId)
  return _internal_userid();
}
inline void CreateAccountWebSuccess::_internal_set_userid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.userid_ = value;
}
inline void CreateAccountWebSuccess::set_userid(int64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebSuccess.userId)
}

// -------------------------------------------------------------------

// CreateAccountWebFailure

// required int64 requestId = 1;
inline bool CreateAccountWebFailure::_internal_has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreateAccountWebFailure::has_requestid() const {
  return _internal_has_requestid();
}
inline void CreateAccountWebFailure::clear_requestid() {
  _impl_.requestid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t CreateAccountWebFailure::_internal_requestid() const {
  return _impl_.requestid_;
}
inline int64_t CreateAccountWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebFailure.requestId)
  return _internal_requestid();
}
inline void CreateAccountWebFailure::_internal_set_requestid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.requestid_ = value;
}
inline void CreateAccountWebFailure::set_requestid(int64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebFailure.requestId)
}

// required .authentication.CreateAccountWebFailure.reason error = 2;
inline bool CreateAccountWebFailure::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreateAccountWebFailure::has_error() const {
  return _internal_has_error();
}
inline void CreateAccountWebFailure::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::authentication::CreateAccountWebFailure_reason CreateAccountWebFailure::_internal_error() const {
  return static_cast< ::authentication::CreateAccountWebFailure_reason >(_impl_.error_);
}
inline ::authentication::CreateAccountWebFailure_reason CreateAccountWebFailure::error() const {
  // @@protoc_insertion_point(field_get:authentication.CreateAccountWebFailure.error)
  return _internal_error();
}
inline void CreateAccountWebFailure::_internal_set_error(::authentication::CreateAccountWebFailure_reason value) {
  assert(::authentication::CreateAccountWebFailure_reason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_ = value;
}
inline void CreateAccountWebFailure::set_error(::authentication::CreateAccountWebFailure_reason value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:authentication.CreateAccountWebFailure.error)
}

// -------------------------------------------------------------------

// AuthenticateWeb

// required int64 requestId = 1;
inline bool AuthenticateWeb::_internal_has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateWeb::clear_requestid() {
  _impl_.requestid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t AuthenticateWeb::_internal_requestid() const {
  return _impl_.requestid_;
}
inline int64_t AuthenticateWeb::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWeb.requestId)
  return _internal_requestid();
}
inline void AuthenticateWeb::_internal_set_requestid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.requestid_ = value;
}
inline void AuthenticateWeb::set_requestid(int64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWeb.requestId)
}

// required string email = 2;
inline bool AuthenticateWeb::_internal_has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_email() const {
  return _internal_has_email();
}
inline void AuthenticateWeb::clear_email() {
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWeb::email() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWeb.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWeb::set_email(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:authentication.AuthenticateWeb.email)
  return _s;
}
inline const std::string& AuthenticateWeb::_internal_email() const {
  return _impl_.email_.Get();
}
inline void AuthenticateWeb::_internal_set_email(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::_internal_mutable_email() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::release_email() {
  // @@protoc_insertion_point(field_release:authentication.AuthenticateWeb.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthenticateWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:authentication.AuthenticateWeb.email)
}

// required string plaintextPassword = 3;
inline bool AuthenticateWeb::_internal_has_plaintextpassword() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void AuthenticateWeb::clear_plaintextpassword() {
  _impl_.plaintextpassword_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticateWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWeb.plaintextPassword)
  return _internal_plaintextpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWeb::set_plaintextpassword(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.plaintextpassword_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWeb.plaintextPassword)
}
inline std::string* AuthenticateWeb::mutable_plaintextpassword() {
  std::string* _s = _internal_mutable_plaintextpassword();
  // @@protoc_insertion_point(field_mutable:authentication.AuthenticateWeb.plaintextPassword)
  return _s;
}
inline const std::string& AuthenticateWeb::_internal_plaintextpassword() const {
  return _impl_.plaintextpassword_.Get();
}
inline void AuthenticateWeb::_internal_set_plaintextpassword(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.plaintextpassword_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::_internal_mutable_plaintextpassword() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.plaintextpassword_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthenticateWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:authentication.AuthenticateWeb.plaintextPassword)
  if (!_internal_has_plaintextpassword()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.plaintextpassword_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.plaintextpassword_.IsDefault()) {
    _impl_.plaintextpassword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthenticateWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.plaintextpassword_.SetAllocated(plaintextpassword, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.plaintextpassword_.IsDefault()) {
    _impl_.plaintextpassword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:authentication.AuthenticateWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// AuthenticateWebSuccess

// required int64 requestId = 1;
inline bool AuthenticateWebSuccess::_internal_has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWebSuccess::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateWebSuccess::clear_requestid() {
  _impl_.requestid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t AuthenticateWebSuccess::_internal_requestid() const {
  return _impl_.requestid_;
}
inline int64_t AuthenticateWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebSuccess.requestId)
  return _internal_requestid();
}
inline void AuthenticateWebSuccess::_internal_set_requestid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.requestid_ = value;
}
inline void AuthenticateWebSuccess::set_requestid(int64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebSuccess.requestId)
}

// required int64 userId = 2;
inline bool AuthenticateWebSuccess::_internal_has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateWebSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void AuthenticateWebSuccess::clear_userid() {
  _impl_.userid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t AuthenticateWebSuccess::_internal_userid() const {
  return _impl_.userid_;
}
inline int64_t AuthenticateWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebSuccess.userId)
  return _internal_userid();
}
inline void AuthenticateWebSuccess::_internal_set_userid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.userid_ = value;
}
inline void AuthenticateWebSuccess::set_userid(int64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebSuccess.userId)
}

// required string creationDate = 3;
inline bool AuthenticateWebSuccess::_internal_has_creationdate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWebSuccess::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void AuthenticateWebSuccess::clear_creationdate() {
  _impl_.creationdate_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWebSuccess::creationdate() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebSuccess.creationDate)
  return _internal_creationdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateWebSuccess::set_creationdate(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.creationdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebSuccess.creationDate)
}
inline std::string* AuthenticateWebSuccess::mutable_creationdate() {
  std::string* _s = _internal_mutable_creationdate();
  // @@protoc_insertion_point(field_mutable:authentication.AuthenticateWebSuccess.creationDate)
  return _s;
}
inline const std::string& AuthenticateWebSuccess::_internal_creationdate() const {
  return _impl_.creationdate_.Get();
}
inline void AuthenticateWebSuccess::_internal_set_creationdate(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.creationdate_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticateWebSuccess::_internal_mutable_creationdate() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.creationdate_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthenticateWebSuccess::release_creationdate() {
  // @@protoc_insertion_point(field_release:authentication.AuthenticateWebSuccess.creationDate)
  if (!_internal_has_creationdate()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.creationdate_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creationdate_.IsDefault()) {
    _impl_.creationdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthenticateWebSuccess::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.creationdate_.SetAllocated(creationdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creationdate_.IsDefault()) {
    _impl_.creationdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:authentication.AuthenticateWebSuccess.creationDate)
}

// -------------------------------------------------------------------

// AuthenticateWebFailure

// required int64 requestId = 1;
inline bool AuthenticateWebFailure::_internal_has_requestid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWebFailure::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateWebFailure::clear_requestid() {
  _impl_.requestid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t AuthenticateWebFailure::_internal_requestid() const {
  return _impl_.requestid_;
}
inline int64_t AuthenticateWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebFailure.requestId)
  return _internal_requestid();
}
inline void AuthenticateWebFailure::_internal_set_requestid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.requestid_ = value;
}
inline void AuthenticateWebFailure::set_requestid(int64_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebFailure.requestId)
}

// required .authentication.AuthenticateWebFailure.reason error = 2;
inline bool AuthenticateWebFailure::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWebFailure::has_error() const {
  return _internal_has_error();
}
inline void AuthenticateWebFailure::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::authentication::AuthenticateWebFailure_reason AuthenticateWebFailure::_internal_error() const {
  return static_cast< ::authentication::AuthenticateWebFailure_reason >(_impl_.error_);
}
inline ::authentication::AuthenticateWebFailure_reason AuthenticateWebFailure::error() const {
  // @@protoc_insertion_point(field_get:authentication.AuthenticateWebFailure.error)
  return _internal_error();
}
inline void AuthenticateWebFailure::_internal_set_error(::authentication::AuthenticateWebFailure_reason value) {
  assert(::authentication::AuthenticateWebFailure_reason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_ = value;
}
inline void AuthenticateWebFailure::set_error(::authentication::AuthenticateWebFailure_reason value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:authentication.AuthenticateWebFailure.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace authentication

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::authentication::CreateAccountWebFailure_reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::authentication::CreateAccountWebFailure_reason>() {
  return ::authentication::CreateAccountWebFailure_reason_descriptor();
}
template <> struct is_proto_enum< ::authentication::AuthenticateWebFailure_reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::authentication::AuthenticateWebFailure_reason>() {
  return ::authentication::AuthenticateWebFailure_reason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto
